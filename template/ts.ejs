import { useCallback } from 'react';
import type { AxiosTransformer, AxiosRequestConfig } from 'axios';

<%definitions.forEach(element => {%>
<%if(element.description){%>/** <%=element.description%>*/<%}%>
   export type <%=element.name%> = {
    <%element.tsType.properties.forEach(propertity =>{%>
    <%=propertity.name%><%if(propertity.optional){_%>?<%}%>:<%if(propertity.isRef){%><%=propertity.target%><%}%><%if(propertity.isAtomic){%><%- propertity.tsType %><%}%><%if(propertity.isArray){%>Array<<%if(propertity.elementType.target){%><%- propertity.elementType.target %><%} else {%>any<%}%>><%}_%>
    <%})%>
    }
<%})%>

<% methods.forEach( method => {%>
/**
* @name <%=method.summary%>
* <% method.parameters.forEach(parameter => {%>
* @param <%=parameter.type %> <%=parameter.name %> - <%=parameter.description _%>
<%})%>
*/
export function <%=method.methodName %> (
  payload?: {
  <% method.parameters.forEach(parameter => {
      let paramType = parameter.tsType.target || parameter.tsType.tsType;
      if(paramType === "array"){paramType = "Array<"+parameter.tsType.elementType.target+">"}%>'<%=parameter.name %>'<%=parameter.required %>:<%-paramType %>,
    <%})_%>
  },
  transformers?: AxiosTransformer[] | AxiosTransformer,
): Promise<any>{
  let url = '<%=method.path%>';
<%_method.parameters.forEach(parameter => {%><%if(parameter.isPathParameter) {%>url = url.replace('{<%=parameter.name%>}',payload.<%=parameter.name%>);<%}%><%})_%>
  return useCallback((): AxiosRequestConfig => ({
    url,
    method: '<%=method.method%>',
    transformResponse: transformers,
    data: payload,
  }))
}
<%})%>
