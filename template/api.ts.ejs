/* eslint-disable @typescript-eslint/no-explicit-any, prefer-const, @typescript-eslint/naming-convention, @typescript-eslint/ban-types, @typescript-eslint/no-empty-interface */

/**
 * 该文件是根据后端的 API 文档自动生成，禁止修改
 */
import mulanApi from '@mulan/lib/src/network/api';
import type { AxiosRequestConfig, AxiosPromise } from 'axios';

import { useResourceForGenAPI, AxiosRestResponse, IMergeArgsAndPass, splitArgsAndPass, isObjKeysHasEmpty } from '@mulan/apis/base';

<%
function isDef(v) {
  return v !== undefined && v !== null;
}

function safeReaper(obj, path, defaultVal) {
  if (!isDef(obj) || !isDef(path)) {
    return defaultVal;
  }

  try {
    const val = new Function(
      'obj',
      `return obj${path.startsWith('[') ? '' : '.'}${path};`,
    )(obj);

    if (isDef(val)) {
      return val;
    }

    return defaultVal;
  } catch (err) {
    return defaultVal;
  }
}
%>

<%function genTsType(ret = {}) {%>
  <%if (ret.isRef) {%>
    <%-ret.target || 'any'%>
  <%} else if (ret.isArray) {%>
    Array<<%genTsType(safeReaper(ret, 'elementType', {}))%>>
  <%} else if (ret.isAtomic){%>
    <%-ret.tsType || 'any'%>
  <%} else if (ret.isObject) {%>
    {
      <%safeReaper(ret, 'properties', []).forEach((propertity) => {%>
        <%=propertity.name%><%=propertity.isRequired && '?'%>: <%genTsType(propertity)%>
      <%})%>
    }
  <%} else {%>
    any
  <%}%>
<%}%>

<%# ------start---component 类型------ %>
<%components.forEach(component => {%>
  /**
   * @name <%=component.name%>
   * @description <%=component.description%>
   */
  export type <%=component.name%> = <%genTsType(safeReaper(component, 'tsType', {}))%>;
<%})%>
<%# ------end---component 类型------ %>

<% methods.forEach( method => {%>
  <%
    let methodName = method.methodName.replace(/^\S/, s => s.toUpperCase())
    const typeResponseName = `Ifa${methodName}Response`
    const typeRequestPathParametersName = `Ifa${methodName}ReqPathParameters`;
    const typeRequestQueryParametersName = `Ifa${methodName}ReqQueryParameters`;
    const typeRequestHeaderParametersName = `Ifa${methodName}ReqHeaderParameters`;

    const typeRequestBodyName = `Ifa${methodName}RequestBody`

    const containParams = !!method.parameters;
    const parametersTypes = containParams ? method.parameters.map(p => p.in) : [];

    // [parameters] path, query, header 筛选后数组
    const parameters_path = parametersTypes.includes('path') && method.parameters.filter(p => p.in === 'path');
    const parameters_query = parametersTypes.includes('query') && method.parameters.filter(p => p.in === 'query');
    const parameters_header = parametersTypes.includes('header') && method.parameters.filter(p => p.in === 'header');
    // TODO cookie parameters

    // [parameters] query, header 存在必填项。(默认 path parameters 存在就是必填项)
    const containRequired_query = parameters_query && parameters_query.some(p => p.isRequired);
    const containRequired_header = parameters_header && parameters_header.some(p => p.isRequired);

    const containBody = !!method.requestBody;
    let response = method.response || {}
  %>

  <%# ------start---响应类型------ %>
  export type <%= typeResponseName %> = <%genTsType(response)%>;
  <%# ------end---响应类型------ %>

  <%# ------start---请求参数------ %>
  <%if (parameters_path) {%>
    export interface <%=typeRequestPathParametersName%> {
      <%parameters_path.forEach(parameter => {%>
        <%if (parameter.description) {%>/** <%=parameter.description%> */<%}%>
        <%=parameter.name%><%=parameter.isRequired ? '' : '?'%>: <%genTsType(parameter)%>
      <%})%>
    }
  <%}%>
  <%if (parameters_query) {%>
    export interface <%=typeRequestQueryParametersName%> {
      <%parameters_query.forEach(parameter => {%>
        <%if (parameter.description) {%>/** <%=parameter.description%> */<%}%>
        <%=parameter.name%><%=parameter.isRequired ? '' : '?'%>: <%genTsType(parameter)%>
      <%})%>
    }
  <%}%>
  <%if (parameters_header) {%>
    export interface <%=typeRequestHeaderParametersName%> {
      <%parameters_header.forEach(parameter => {%>
        <%if (parameter.description) {%>/** <%=parameter.description%> */<%}%>
        <%if (/^\w+$/g.test(parameter.name)) {%><%=parameter.name%><%} else {%>'<%=parameter.name%>'<%}%><%=parameter.isRequired ? '' : '?'%>: <%genTsType(parameter)%>
      <%})%>
    }
  <%}%>
  <%if (containBody) {%>
    export type <%=typeRequestBodyName%> = <%genTsType(safeReaper(method, 'requestBody', {}))%>
  <%}%>
  <%# ------end---请求参数------ %>

  <%
    const configFuncName = `get${methodName}RequestConfig`;
  %>
  /**
  * @name <%=configFuncName%>
  * @path <%=method.path%>
  * @description <%=method.description%>
  */
  export function <%=configFuncName_%> (
    <%if (parameters_path || parameters_query) {%>params<%=(containRequired_query || parameters_path) ? '' : '?'%>:
    <%if (parameters_query) {%><%=typeRequestQueryParametersName%><%}-%>
    <%if (parameters_query && parameters_path) {%> & <%}-%>
    <%if (parameters_path) {%><%=typeRequestPathParametersName%><%}-%>,<%}-%>
    <%if (containBody) {%>data: <%=typeRequestBodyName%>,<%}-%>
    opts?: AxiosRequestConfig <%if (parameters_header) {%>& { headers<%=containRequired_header ? '' : '?'%>: <%=typeRequestHeaderParametersName%> }<%}%>,
  ): AxiosRequestConfig {
    <%if (parameters_path || parameters_query) {%>
      const {
        <%if (parameters_path) {%><%parameters_path.forEach(path => {%><%=path.name%>,<%})-%><%}-%>
        <%if (parameters_query) {%>...query,<%}-%>
      } = params;
    <%}%>
    <%if (parameters_path) {%>
      const url = `<%=method.path.replace(/{/g, '${')%>`;
    <%} else {%>
      const url = '<%=method.path%>';
    <%}%>

    return {
      url,
      method: '<%=method.method.toLowerCase()%>',
      <%if (parameters_query) {%>params: query,<%}-%>
      <%if (containBody) {%>data,<%}-%>
      ...opts
    }
  }

  <%
    const apiFuncName = `api${method.method.toUpperCase()}${methodName}`;
    const pathAndQueryParamsStr = [...(parameters_path || []), ...(parameters_query || [])].map(p => p.name).join(', ');
    const headerParamsStr = parameters_header && parameters_header.map(p => p.name).join(', ');
  %>
  /**
  * @path <%=method.path%>
  <% if (pathAndQueryParamsStr) {%>* @params <%=pathAndQueryParamsStr%><%}-%>
  <% if (headerParamsStr) {%>* @header <%=headerParamsStr%><%}%>
  */
  export async function <%=apiFuncName%>(...options: Parameters<typeof <%=configFuncName_%>>): Promise<[<%=typeResponseName%>, AxiosRestResponse]> {
    const { data, ...restResponse } = await (mulanApi(<%=configFuncName_%>(...options)) as AxiosPromise<<%=typeResponseName%>>);
    
    return [data, restResponse];
  }

  <%if (method.method.toLowerCase() === 'get') {%>
  /**
  * @path <%=method.path%>
  <% if (pathAndQueryParamsStr) {%>* @params <%=pathAndQueryParamsStr%><%}-%>
  <% if (headerParamsStr) {%>* @header <%=headerParamsStr%><%}%>
  */
  export function <%=`use${methodName}Resource`%>(
    ...args: IMergeArgsAndPass<typeof <%=configFuncName_%>>
  ) {
    const { options, pass } = splitArgsAndPass<typeof <%=configFuncName_%>>(args);

    return useResourceForGenAPI<<%=typeResponseName%>, typeof <%=configFuncName%>>(
      <%=configFuncName%>,
      options,
      pass <%if (containRequired_query || parameters_path) {%>?? !isObjKeysHasEmpty(options[0], [
        <%if (parameters_path) {%><%parameters_path.forEach(path => {%>'<%=path.name%>',<%})-%><%}-%>
        <%if (parameters_query) {%><%parameters_query.forEach(query => {%>
          <%if (query.isRequired) {%>'<%=query.name%>',<%}%>
          <%})-%><%}-%>
        ])<%} else {%>?? true<%}%>,
    )
  }
  <%}%>
<%})%>
